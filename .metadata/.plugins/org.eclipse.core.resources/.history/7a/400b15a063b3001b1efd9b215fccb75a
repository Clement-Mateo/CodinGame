import java.util.ArrayList;
import java.util.Scanner;

class Player {

	public static Scanner			scanner;

	public static boolean			played	= false;

	public static int				numberOfCells;
	public static ArrayList<Cell>	cells;

	public static int				day;
	public static int				nutrients;

	public static PlayerSpring		playerMe;
	public static PlayerSpring		playerAdverse;

	public static int				numberOfTrees;
	public static ArrayList<Tree>	trees;
	public static ArrayList<Tree>	treesMe;
	public static ArrayList<Tree>	treesEnnemy;

	public static void main(String args[]) {

		scanner = new Scanner(System.in);

		cells = new ArrayList<>();
		numberOfCells = scanner.nextInt(); // 37
		for (int i = 0; i < numberOfCells; i++) {
			Cell cell = new Cell();
			cell.index = scanner.nextInt(); // 0 is the center cell, the next cells spiral outwards
			cell.richness = scanner.nextInt(); // 0 if the cell is unusable, 1-3 for usable cells
			cell.neighs.add(scanner.nextInt()); // the index of the neighbouring cell for each direction
			cell.neighs.add(scanner.nextInt());
			cell.neighs.add(scanner.nextInt());
			cell.neighs.add(scanner.nextInt());
			cell.neighs.add(scanner.nextInt());
			cell.neighs.add(scanner.nextInt());
			cells.add(cell);
		}

		while (true) { // game loop

			init();

			if (getNbRoundsLeft() > 3) { // s'il reste plus de 3 rounds

				if (treesMe.size() == 2) { // si le jeu viens de commencer
					if (getNbOfTreesMeForSize(2) + getNbOfTreesMeForSize(3) > 0) { // si j'ai amelioré au moins un arbre
						seedBestTreeICan(); // je plante le maximum d'arbres que je peux (en priorité sur les terres les plus riches)
					}

					growBestTreeICan(); // j'ameliore le meilleur arbre (en priorité les plus grand, sur la terre la plus riche)

					action("WAIT J'attend");

				} else {
					if (getNbOfTreesMeForSize(3) >= 3) { // si j'ai au moins 3 arbres de taille 3

						if (getNbOfTreesMeForSize(3) > 3) { // si j'ai plus de 3 arbres de taille 3
							completeBestTreeICan(); // alors je complete des arbres jusqu'a n'en avoir que 3 de taille 3
						}
					}

					growBestTreeICan(); // j'ameliore le meilleur arbre (en priorité les plus grand, sur la terre la plus riche)

					seedBestTreeICan(); // je plante le maximum d'arbres que je peux (en priorité sur les terres les plus riches)

					action("WAIT J'attend");
				}

			} else { // s'il reste moins de 4 rounds

				completeBestTreeICan(); // je complete tout mes arbes de taille 3 que je peux (en priorité ceux sur les terres les plus riches)

				quickGrowThree3AndCompleteIt(); // je fait des arbres de taille 3 en priorité et je les termines (en priorité ceux sur les terres les plus riches)

				action("WAIT J'attend");
			}

		}
	}

	public static void init() {

		played = false;

		day = scanner.nextInt(); // the game lasts 24 days: 0-23
		nutrients = scanner.nextInt(); // the base score you gain from the next COMPLETE action

		playerMe = new PlayerSpring();
		playerMe.nbSuns = scanner.nextInt(); // your sun points
		playerMe.score = scanner.nextInt(); // your current score
		playerMe.isWaiting = false;

		playerAdverse = new PlayerSpring();
		playerAdverse.nbSuns = scanner.nextInt(); // opponent's sun points
		playerAdverse.score = scanner.nextInt(); // opponent's score
		playerAdverse.isWaiting = scanner.nextInt() == 1; // whether your opponent is asleep until the next day

		trees = new ArrayList<>();
		treesMe = new ArrayList<>();
		treesEnnemy = new ArrayList<>();

		numberOfTrees = scanner.nextInt(); // the current amount of trees
		for (int i = 0; i < numberOfTrees; i++) {
			Tree tree = new Tree();
			tree.cell = getCell(scanner.nextInt()); // location of this tree
			tree.size = scanner.nextInt(); // size of this tree: 0-3
			tree.isMine = scanner.nextInt() == 1; // 1 if this is your tree
			tree.isDormant = scanner.nextInt() == 1; // 1 if this tree is dormant
			trees.add(tree);

			if (tree.isMine) {
				treesMe.add(tree);
			} else {
				treesEnnemy.add(tree);
			}
		}

		// je m'en branle pas besoin d'aide
		int numberOfPossibleActions = scanner.nextInt(); // all legal actions
		if (scanner.hasNextLine()) {
			scanner.nextLine();
		}
		for (int i = 0; i < numberOfPossibleActions; i++) {
			scanner.nextLine();
		}
	}

	public static void seedBestTreeICan() {
		if (playerMe.nbSuns >= getNbOfTreesMeForSize(0) && !played) { // tant que j'ai assez d'energie pour planter un arbre

			ArrayList<Cell> cells = getCellsICanSeed();

			Cell bestCell = null;
			for (Cell cell : cells) { // pour tout les cases dans lesquels je peux planter un arbre
				if (bestCell == null) {
					bestCell = cell;
				} else {
					if (cell.richness > bestCell.richness) { // si la case est plus riche que celle que j'ai choisi
						bestCell = cell; // je la choisie
					} else {
						if (cell.richness == bestCell.richness) { // si la case est aussi riche que celle que j'ai choisi
							if (cell.getNbTreeInRangeToShadow() < bestCell.getNbTreeInRangeToShadow()) { // si la case a moins d'arbres qui risque de l'ombrager que la case que j'ai choisi
								bestCell = cell; // je la choisie
							}
						}
					}
				}
			}

			if (bestCell != null) {
				action("SEED " + bestCell.getBestTreeInRangeToSeed().cell.index + " " + bestCell.index + " Je plante");
				Tree treeSeeded = new Tree(bestCell, 0, true, true);
				trees.add(treeSeeded);
				treesMe.add(treeSeeded);

				playerMe.nbSuns -= getCostSeed();
			}
		}
	}

	public static void growBestTreeICan() {

		if (playerMe.nbSuns >= 7 + getNbOfTreesMeForSize(3) && !played) { // tant que j'ai assez d'energie pour level up de 2 a 3
			Tree bestTree = null;
			Integer bestCellRichnessTreeCanSeed = null;
			for (Tree tree : treesMe) { // pour tout mes arbres
				if (tree.size == 2 && !tree.isDormant) {
					if (bestTree == null) {
						bestTree = tree;
						bestCellRichnessTreeCanSeed = getBestCellRichnessTreeCanSeed(tree);
					} else {
						if (tree.cell.richness >= bestTree.cell.richness) { // si l'arbre est sur une terre plus riche et qu'il n'est pas endormi
							if (tree.cell.richness == bestTree.cell.richness) {
								try {
									if (getBestCellRichnessTreeCanSeed(tree) > bestCellRichnessTreeCanSeed) {
										bestTree = tree; // je le choisit
										bestCellRichnessTreeCanSeed = getBestCellRichnessTreeCanSeed(tree);
									}
								} catch (Exception e) {
									// ignorer
								}
							} else {
								bestTree = tree; // je le choisit
								bestCellRichnessTreeCanSeed = getBestCellRichnessTreeCanSeed(tree);
							}
						}
					}
				}
			}

			if (bestTree != null) {
				action("GROW " + bestTree.cell.index + " Je fait grandir de 2 a 3");

				bestTree.size++;
				bestTree.save();

				playerMe.nbSuns -= getCostGrow(3);
			}
		}

		if (playerMe.nbSuns >= 3 + getNbOfTreesMeForSize(2) && !played) { // tant que j'ai assez d'energie pour level up de 2 a 3
			Tree bestTree = null;
			Integer bestCellRichnessTreeCanSeed = null;
			for (Tree tree : treesMe) { // pour tout mes arbres
				if (tree.size == 1 && !tree.isDormant) {
					if (bestTree == null) {
						bestTree = tree;
						bestCellRichnessTreeCanSeed = getBestCellRichnessTreeCanSeed(tree);
					} else {
						if (tree.cell.richness >= bestTree.cell.richness) { // si l'arbre est sur une terre plus riche et qu'il n'est pas endormi
							if (tree.cell.richness == bestTree.cell.richness) {
								try {
									if (getBestCellRichnessTreeCanSeed(tree) > bestCellRichnessTreeCanSeed) {
										bestTree = tree; // je le choisit
										bestCellRichnessTreeCanSeed = getBestCellRichnessTreeCanSeed(tree);
									}
								} catch (Exception e) {
									// ignorer
								}
							} else {
								bestTree = tree; // je le choisit
								bestCellRichnessTreeCanSeed = getBestCellRichnessTreeCanSeed(tree);
							}
						}
					}
				}
			}

			if (bestTree != null) {
				action("GROW " + bestTree.cell.index + " Je fait grandir de 1 a 2");

				bestTree.size++;
				bestTree.save();

				playerMe.nbSuns -= getCostGrow(2);
			}
		}

		if (playerMe.nbSuns >= 1 + getNbOfTreesMeForSize(1) && !played) { // tant que j'ai assez d'energie pour level up de 0 a 1
			Tree bestTree = null;
			for (Tree tree : treesMe) { // pour tout mes arbres
				if (tree.size == 0 && !tree.isDormant) {
					if (bestTree == null) {
						bestTree = tree;
					} else {
						if (tree.cell.richness > bestTree.cell.richness) { // si l'arbre est sur une terre plus riche et qu'il n'est pas endormi
							bestTree = tree; // je le choisit
						}
					}
				}
			}

			if (bestTree != null) {
				action("GROW " + bestTree.cell.index + " Je fait grandir de 0 a 1");

				bestTree.size++;
				bestTree.save();

				playerMe.nbSuns -= getCostGrow(1);
			}
		}
	}

	public static void completeBestTreeICan() {
		if (playerMe.nbSuns >= 4 && !played) { // tant que j'ai assez d'energie

			Tree bestTree = null;
			for (Tree tree : treesMe) { // pour tout mes arbres

				if (tree.size == 3) {
					if (bestTree == null) {
						bestTree = tree;
					} else {
						if (tree.cell.richness > bestTree.cell.richness) { // si l'arbre est sur une terre plus riche
							bestTree = tree; // je le choisit
						}
					}
				}
			}

			if (bestTree != null) {
				action("COMPLETE " + bestTree.cell.index + " je complete un arbre");

				trees.remove(bestTree);
				treesMe.remove(bestTree);

				playerMe.nbSuns -= 4;
			}
		}
	}

	public static void quickGrowThree3AndCompleteIt() {
		Tree bestTree = null;
		for (Tree tree : treesMe) { // pour chacun de mes arbres
			if (bestTree == null) {
				bestTree = tree;
			} else {
				if (tree.size > bestTree.size) { // si l'arbre est plus grand
					bestTree = tree; // je le choisi
				} else if (tree.size == bestTree.size) { // si l'arbre est de même taille
					if (tree.cell.richness > bestTree.cell.richness) { // si l'arbre est sur une case plus riche
						bestTree = tree; // je le choisi
					}
				}
			}
		}

		if (playerMe.nbSuns >= getCostForGrowAndCompleteTree(bestTree)) {
			if (bestTree.getNbRoundsForGrowAndCompleteTree() < getNbRoundsLeft()) { // xi j'ai assez de tour pour grow + complete un arbre
				if (bestTree.size < 3) {
					action("GROW " + bestTree.cell.index + " je fait grandir pour vite complete");
					playerMe.nbSuns -= getCostGrow(bestTree.size);
				} else {
					action("COMPLETE " + bestTree.cell.index + " je complete pour vite faire des points");
					playerMe.nbSuns -= 4;

					trees.remove(bestTree);
					treesMe.remove(bestTree);
				}
			}
		}
	}

	public static ArrayList<Cell> getCellsICanSeed() {
		ArrayList<Cell> cells = new ArrayList<>();

		for (Tree tree : treesMe) {
			ArrayList<Cell> cellsTreecanSeed = tree.getCellsTreeCanSeed();
			for (Cell cell : cellsTreecanSeed) {
				if (!cells.contains(cell)) {
					cells.add(cell);
				}
			}
		}

		return cells;
	}

	public static Integer getBestCellRichnessTreeCanSeed(Tree tree) {
		ArrayList<Cell> cellsTreeCanSeed = tree.getCellsTreeCanSeed();
		Integer bestCellRichnessTreeCanSeed = null;

		for (Cell cell : cellsTreeCanSeed) {
			if (bestCellRichnessTreeCanSeed == null) {
				bestCellRichnessTreeCanSeed = cell.richness;
			} else {
				if (cell.richness > bestCellRichnessTreeCanSeed) {
					bestCellRichnessTreeCanSeed = cell.richness;
				}
			}
		}

		return bestCellRichnessTreeCanSeed;
	}

	public static int getCostForGrowAndCompleteTree(Tree tree) {
		int cost = 0;
		while (tree.size < 3) { // tant que l'arbre n'est pas de taille 3
			cost += getCostGrow(tree.size); // on ajoute le cout de l'amelioration de l'arbre au cout total
			tree.size++; // on ameliore l'arbre
		}
		cost += 4; // enfin on ajoute le cout de completion de l'arbre

		return cost;
	}

	public static int getSunsPlannedForTrees(ArrayList<Tree> trees) {

		int sunsPlannedForTrees = 0;

		for (Tree tree : trees) { // pour chaque arbre
			if (tree.size > 0 && !tree.isDormant) { // si ce n'est pas une graine et que l'arbre n'est pas endormi
				sunsPlannedForTrees += tree.size;
			}
		}
		return sunsPlannedForTrees;
	}

	public static int getNbOfTreesMeForSize(int size) {
		int nb = 0;

		for (Tree tree : treesMe) {
			if (tree.size == size) {
				nb++;
			}
		}

		return nb;
	}

	public static int getNbRoundsLeft() {
		return 23 - day; // 0 a 23 jours, chaque jour dure 6 rounds
	}

	public static int getCostGrow(int size) {
		switch (size) {
		case 1:
			return 1 + getNbOfTreesMeForSize(1);
		case 2:
			return 3 + getNbOfTreesMeForSize(2);
		case 3:
			return 7 + getNbOfTreesMeForSize(3);
		default:
			return 999999;
		}
	}

	public static int getCostSeed() {
		return getNbOfTreesMeForSize(0);
	}

	public static int getSunDirection() {
		return day % 6;
	}

	public static Cell getCell(int index) {
		for (Cell cell : cells) {
			if (cell.index == index) {
				return cell;
			}
		}
		return null;
	}

	public static void action(String action) {
		if (!played) {
			System.out.println(action);
			played = true;
		}
	}

	public static void debug(String message) {
		System.err.println(message);
	}

	// public static int getNbRoundsForCompleteAllFinalTrees() {

	// int nbRoundsForCompleteAllFinalTrees = 0;

	// ArrayList<Tree> treesForSimulation = treesMe;
	// ArrayList<Tree> treesCompletedTmp = new ArrayList<>();

	// int sunsActual = playerMe.nbSuns;
	// int sunsPlanned = getSunsPlannedForTrees(treesMe);

	// boolean found = true;
	// while (found) {

	// found = false;
	// loop: for (Tree tree : treesForSimulation) { // pour tout mes arbres
	// if (tree.size == 3) { // si l'arbre est de taille 3
	// if (sunsActual >= 4) { // et que j'ai assez d'energie pour completer son cycle
	// sunsActual -= 4;

	// if (!tree.isDormant) {
	// sunsPlanned -= tree.size;
	// }

	// treesCompletedTmp.add(tree); // je le complete
	// } else {
	// if (sunsPlanned > 0) { // si j'ai encore des arbres qui me rapportent de l'energie alors j'attend d'avoir assez d'energie
	// sunsActual += sunsPlanned;
	// break loop;
	// } else {
	// return getNbOfTreesMeForSize(3); // sinon je renvoi le nombre de tours equivalent au nombre d'arbres de taille 3 que j'ai
	// }
	// }
	// found = true;
	// }
	// }

	// /* Suppression des arbres qu'on a completé */
	// for (Tree treeToRemove : treesCompletedTmp) {
	// Integer indexInTreesForSimulation = null;
	// for (int i = 0; i < treesForSimulation.size(); i++) {
	// Tree tree = treesForSimulation.get(i);

	// if (treeToRemove.cell.index == tree.cell.index) {
	// indexInTreesForSimulation = i;
	// }
	// }

	// if (indexInTreesForSimulation != null) {
	// treesForSimulation.remove(indexInTreesForSimulation);
	// }
	// }

	// nbRoundsForCompleteAllFinalTrees++;
	// }

	// return nbRoundsForCompleteAllFinalTrees;

	// }

}

class Tree {

	public Cell		cell;
	public int		size;
	public boolean	isMine;
	public boolean	isDormant;

	public Tree() {

	}

	public Tree(Cell cell, int size, boolean isMine, boolean isDormant) {
		super();
		this.cell = cell;
		this.size = size;
		this.isMine = isMine;
		this.isDormant = isDormant;
	}

	public ArrayList<Cell> getCellsUnderShadowNextRound() {
		int direction = Player.getSunDirection();
		ArrayList<Cell> cellsUnderShadow = new ArrayList<Cell>();

		Cell neigh1 = Player.getCell(this.cell.neighs.get(direction));
		cellsUnderShadow.add(neigh1); // on ajoute la cellule

		if (this.size > 1) {
			Cell neigh2 = Player.getCell(neigh1.neighs.get(direction));
			cellsUnderShadow.add(neigh2); // on ajoute la cellule

			if (this.size > 2) {
				Cell neigh3 = Player.getCell(neigh2.neighs.get(direction));
				cellsUnderShadow.add(neigh3); // on ajoute la cellule
			}
		}

		return cellsUnderShadow;
	}

	public boolean isUnderShadowNextRound() {
		int direction = Player.getSunDirection();

		for (Tree tree : Player.trees) { // pour chaque arbre de la carte
			if (tree.size >= this.size) { // si l'arbre est plus grand ou de même taille
				if (tree.getCellsUnderShadowNextRound().contains(this)) { // si l'arbre fait de l'ombre a cette arbre
					return true;
				}
			}
		}
		return false;
	}

	public void save() {
		for (int i = 0; i < Player.trees.size(); i++) {
			Tree tree = Player.trees.get(i);

			if (tree.cell.index == this.cell.index) {
				Player.trees.set(i, this);
			}
		}

		for (int i = 0; i < Player.treesMe.size(); i++) {
			Tree tree = Player.treesMe.get(i);

			if (tree.cell.index == this.cell.index) {
				Player.treesMe.set(i, this);
			}
		}
	}

	public int getNbRoundsForGrowAndCompleteTree() {
		return 4 - this.size;
	}

	public ArrayList<Cell> getCellsTreeCanSeed() {
		ArrayList<Cell> cells = new ArrayList<>();

		if (this.size > 0 && !this.isDormant) {
			for (int neigh : this.cell.neighs) {
				Cell cell = Player.getCell(neigh);
				if (cell != null) {
					if (!cells.contains(cell) && !cell.existTree() && cell.richness > 0) {// si la case n'est pas inutilisable
						cells.add(cell);
					}

					if (this.size > 1) {
						for (int neigh2 : cell.neighs) {
							Cell cell2 = Player.getCell(neigh2);
							if (cell2 != null) {
								if (!cells.contains(cell2) && !cell2.existTree() && cell2.richness > 0) {
									cells.add(cell2);
								}

								if (this.size > 2) {
									for (int neigh3 : cell2.neighs) {
										Cell cell3 = Player.getCell(neigh3);
										if (cell3 != null) {
											if (!cells.contains(cell3) && !cell3.existTree() && cell2.richness > 0) {
												cells.add(cell3);
											}
										}
									}
								}
							}
						}
					}

				}
			}
		}

		return cells;
	}
}

class Cell {

	public int					index;
	public int					richness;
	public ArrayList<Integer>	neighs;

	public Cell() {
		neighs = new ArrayList<>();
	}

	public Cell(int index, int richness, ArrayList<Integer> neights) {
		super();
		this.index = index;
		this.richness = richness;
		this.neighs = neights;
	}

	public boolean existTree() {
		for (Tree tree : Player.trees) {
			if (tree.cell.index == this.index) {
				return true;
			}
		}
		return false;
	}

	public boolean existTree(int size) {
		for (Tree tree : Player.trees) {
			if (tree.cell.index == this.index) {
				if (tree.size == size) {
					return true;
				}
			}
		}
		return false;
	}

	public int getNbTreeInRangeToShadow() {
		int nbTreeInRangeToShadow = 0;

		for (Integer neigh : this.neighs) {
			Cell neighCell = Player.getCell(neigh);
			if (neighCell != null) {
				if (neighCell.existTree(1)) {
					nbTreeInRangeToShadow++;
				}

				for (Integer neigh2 : neighCell.neighs) {
					Cell neighCell2 = Player.getCell(neigh2);
					if (neighCell2 != null) {
						if (neighCell2.existTree(2)) {
							nbTreeInRangeToShadow++;
						}

						for (Integer neigh3 : neighCell2.neighs) {
							Cell neighCell3 = Player.getCell(neigh3);
							if (neighCell3 != null) {
								if (neighCell3.existTree(3)) {
									nbTreeInRangeToShadow++;
								}
							}
						}
					}
				}
			}
		}
		return nbTreeInRangeToShadow;
	}

	public Tree getBestTreeInRangeToSeed() {

		Tree bestTree = null;

		for (Tree tree : Player.treesMe) {
			if (tree.size > 0) {
				ArrayList<Cell> cellsTreeCanSeed = tree.getCellsTreeCanSeed();
				if (cellsTreeCanSeed.contains(this)) {
					if (bestTree == null) {
						bestTree = tree;
					} else {
						if (tree.size < bestTree.size) {
							bestTree = tree;
						}
					}
				}
			}
		}

		return bestTree;
	}
}